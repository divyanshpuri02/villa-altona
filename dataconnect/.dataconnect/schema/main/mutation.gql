extend type Mutation {
  """
  ✨ Insert a single `Booking` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  booking_insert(
    """
    Data object to insert into the table.
    """
    data: Booking_Data!
  ): Booking_KeyOutput! @fdc_generated(from: "Booking", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Review` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  review_insert(
    """
    Data object to insert into the table.
    """
    data: Review_Data!
  ): Review_KeyOutput! @fdc_generated(from: "Review", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Villa` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  villa_insert(
    """
    Data object to insert into the table.
    """
    data: Villa_Data!
  ): Villa_KeyOutput! @fdc_generated(from: "Villa", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Booking` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  booking_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Booking_Data!]!
  ): [Booking_KeyOutput!]! @fdc_generated(from: "Booking", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Review` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  review_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Review_Data!]!
  ): [Review_KeyOutput!]! @fdc_generated(from: "Review", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Villa` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  villa_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Villa_Data!]!
  ): [Villa_KeyOutput!]! @fdc_generated(from: "Villa", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Booking` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Booking`.
  """
  booking_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Booking_Data!
  ): Booking_KeyOutput! @fdc_generated(from: "Booking", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Review` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Review`.
  """
  review_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Review_Data!
  ): Review_KeyOutput! @fdc_generated(from: "Review", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Villa` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Villa`.
  """
  villa_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Villa_Data!
  ): Villa_KeyOutput! @fdc_generated(from: "Villa", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `Booking` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Booking`.
  """
  booking_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Booking_Data!]!
  ): [Booking_KeyOutput!]! @fdc_generated(from: "Booking", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Review` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Review`.
  """
  review_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Review_Data!]!
  ): [Review_KeyOutput!]! @fdc_generated(from: "Review", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Villa` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Villa`.
  """
  villa_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Villa_Data!]!
  ): [Villa_KeyOutput!]! @fdc_generated(from: "Villa", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `Booking` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Booking` or `null` if not found.
  """
  booking_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Booking_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Booking_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Booking_Data!
  ): Booking_KeyOutput @fdc_generated(from: "Booking", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Review` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Review` or `null` if not found.
  """
  review_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Review_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Review_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Review_Data!
  ): Review_KeyOutput @fdc_generated(from: "Review", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `User` or `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Villa` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Villa` or `null` if not found.
  """
  villa_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Villa_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Villa_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Villa_Data!
  ): Villa_KeyOutput @fdc_generated(from: "Villa", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Booking` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  booking_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Booking_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Booking_Data!
  ): Int! @fdc_generated(from: "Booking", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Review` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  review_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Review_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Review_Data!
  ): Int! @fdc_generated(from: "Review", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Villa` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  villa_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Villa_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Villa_Data!
  ): Int! @fdc_generated(from: "Villa", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Booking` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  booking_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Booking_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Booking_FirstRow
  ): Booking_KeyOutput @fdc_generated(from: "Booking", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Review` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  review_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Review_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Review_FirstRow
  ): Review_KeyOutput @fdc_generated(from: "Review", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Villa` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  villa_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Villa_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Villa_FirstRow
  ): Villa_KeyOutput @fdc_generated(from: "Villa", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Booking` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  booking_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Booking_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Booking", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Review` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  review_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Review_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Review", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Villa` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  villa_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Villa_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Villa", purpose: DELETE_MULTIPLE)
}
